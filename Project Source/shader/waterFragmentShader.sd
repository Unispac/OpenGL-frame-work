#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D texture_diffuse0;
    sampler2D texture_specular0; 
    bool texture_diffuse0_exist;
    bool texture_specular0_exist; 
    vec4 texture_diffuse_color;
    vec4 texture_specular_color;
	vec4 texture_ambient_color;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	vec3 attenuation;
	bool toAttenuation;
    bool pointlight;
};

in VS_OUT
{
     vec3 FragPos;
     vec3 Normal;
     vec2 TexCoords;
}gs_out;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{


    vec3 ambient;
	vec3 diffuse;
    vec3 specular;
	
	if(material.texture_diffuse0_exist)ambient = light.ambient * texture(material.texture_diffuse0, gs_out.TexCoords).rgb;
    else ambient = light.ambient * material.texture_ambient_color.rgb;


    vec3 norm = normalize(gs_out.Normal);
    vec3 lightDir;
    if(light.pointlight)lightDir = normalize(light.position - gs_out.FragPos);
    else lightDir = normalize(light.direction);


    float diff = max(dot(norm, lightDir),0);

    
    if(material.texture_diffuse0_exist)diffuse = light.diffuse * diff * texture(material.texture_diffuse0, gs_out.TexCoords).rgb;  
    else diffuse = light.diffuse * diff * material.texture_diffuse_color.rgb;

	
    vec3 viewDir = normalize(viewPos - gs_out.FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    
    if(material.texture_specular0_exist)specular=light.specular * spec * texture(material.texture_specular0,gs_out.TexCoords).rgb;  
    else specular = light.specular * spec * material.texture_specular_color.rgb;

	float distance=length(light.position-gs_out.FragPos);
	float attenuation=1.0;
	
	if(light.toAttenuation)attenuation=1.0/
	(light.attenuation.x+light.attenuation.y*distance
	+light.attenuation.z*distance*distance);
	
    vec3 result = (ambient + diffuse + specular)*attenuation;
    FragColor = vec4(result, 0.3);
	//FragColor=vec4(1.0,1.0,1.0,1.0);
} 