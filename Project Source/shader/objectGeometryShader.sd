#version 330 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;


in VS_OUT 
{
     vec3 FragPos;
     vec3 Normal;
     vec2 TexCoords;
} gs_in[];

out VS_OUT
{
     vec3 FragPos;
     vec3 Normal;
     vec2 TexCoords;
}gs_out;




out vec2 TexCoords; 
out vec3 FragPos;
out vec3 Normal;


uniform float factor;
uniform bool toExplode;
vec4 explode(vec4 position, vec3 normal)  
{
    float magnitude = 0.8;
    vec3 direction = normal * sin(factor) * magnitude; 
    return position + vec4(direction, 0.0); 
}


void main() {    
	
	if(toExplode==true)gl_Position = explode(gl_in[0].gl_Position,normalize(gs_in[0].Normal));
    else gl_Position=gl_in[0].gl_Position;
	
	gs_out.TexCoords = gs_in[0].TexCoords;
    gs_out.FragPos = gs_in[0].FragPos;
    gs_out.Normal = gs_in[0].Normal;
    EmitVertex();

    if(toExplode==true)gl_Position = explode(gl_in[1].gl_Position,normalize(gs_in[0].Normal));
    else gl_Position=gl_in[1].gl_Position;
	
    gs_out.TexCoords = gs_in[1].TexCoords;
    gs_out.FragPos = gs_in[1].FragPos;
    gs_out.Normal = gs_in[1].Normal;
    EmitVertex();

    if(toExplode==true)gl_Position = explode(gl_in[2].gl_Position,normalize(gs_in[0].Normal));
    else gl_Position=gl_in[2].gl_Position;
	
    gs_out.TexCoords = gs_in[2].TexCoords;
    gs_out.FragPos = gs_in[2].FragPos;
    gs_out.Normal = gs_in[2].Normal;
    EmitVertex();

    EndPrimitive();
}