#version 330 core
out vec4 FragColor;

struct Material 
{
    vec4 texture_diffuse_color;
    vec4 texture_specular_color;
	vec4 texture_ambient_color;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    bool pointlight;
	vec3 attenuation;
	bool toAttenuation;
};

in VS_OUT
{
     vec3 FragPos;
     vec3 Normal;
}gs_out;
  
uniform vec3 viewPos;

uniform Material material;
uniform Light light;

void main()
{
    vec3 ambient;
	vec3 diffuse;
    vec3 specular;
	
	ambient = light.ambient * material.texture_ambient_color.rgb;


    vec3 norm = normalize(gs_out.Normal);
    vec3 lightDir;
    if(light.pointlight)lightDir = normalize(light.position - gs_out.FragPos);
    else lightDir = normalize(light.direction);


    float diff = dot(norm, lightDir);
    if(diff<0)diff*=-1;
    diffuse = light.diffuse * diff * material.texture_diffuse_color.rgb;

	
    vec3 viewDir = normalize(viewPos - gs_out.FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = dot(viewDir, reflectDir);
	if(spec<0)spec*=-1;
	spec=pow(spec,32*material.shininess);
    specular = light.specular * spec * material.texture_specular_color.rgb;


	float distance=length(light.position-gs_out.FragPos);
	float attenuation=1.0;
	
	if(light.toAttenuation)attenuation=1.0/
	(light.attenuation.x+light.attenuation.y*distance
	+light.attenuation.z*distance*distance);
    vec3 result = (ambient + diffuse + specular)*attenuation;
	
    FragColor = vec4(result, material.texture_diffuse_color.a);
} 
